diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..a2c69fb 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,6 +63,9 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+void            incr_refcnt(void *pa);
+void            decr_refcnt(void *pa);
+int             get_refcnt(void *pa);
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -173,6 +176,7 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+int             cow_alloc(pagetable_t, uint64);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..dc11426 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -23,10 +23,68 @@ struct {
   struct run *freelist;
 } kmem;
 
+struct {
+  struct spinlock lock;
+  int refcnt[PHYSTOP/PGSIZE];
+} pa_refcnt;
+
+int
+pa_to_index(void *pa){
+  return (uint64)pa / PGSIZE;
+}
+
+void
+incr_refcnt(void *pa){
+  if((char*)pa < end || (uint64)pa >= PHYSTOP || ((uint64)pa % PGSIZE) != 0 ){
+    panic("Invalid physical address: incr_refcnt");
+  }
+
+  acquire(&pa_refcnt.lock);
+  pa_refcnt.refcnt[pa_to_index(pa)]++;
+  release(&pa_refcnt.lock);
+}
+
+void
+init_refcnt(void *pa){
+  if((char*)pa < end || (uint64)pa >= PHYSTOP || ((uint64)pa % PGSIZE) != 0 ){
+    panic("Invalid physical address: init_refcnt");
+  }
+
+  acquire(&pa_refcnt.lock);
+  pa_refcnt.refcnt[pa_to_index(pa)] = 1;
+  release(&pa_refcnt.lock);
+}
+
+void
+decr_refcnt(void *pa){
+  if((char*)pa < end || (uint64)pa >= PHYSTOP || ((uint64)pa % PGSIZE) != 0 ){
+    panic("Invalid physical address: decr_refcnt");
+  }
+
+  acquire(&pa_refcnt.lock);
+  pa_refcnt.refcnt[pa_to_index(pa)]--;
+  release(&pa_refcnt.lock);
+}
+
+int
+get_refcnt(void *pa){
+  if((char*)pa < end || (uint64)pa >= PHYSTOP || ((uint64)pa % PGSIZE) != 0 ){
+    panic("Invalid physical address: get_refcnt");
+  }
+
+  acquire(&pa_refcnt.lock);
+  int ret = pa_refcnt.refcnt[pa_to_index(pa)];
+  release(&pa_refcnt.lock);
+  return ret;
+}
+
+
 void
 kinit()
 {
   initlock(&kmem.lock, "kmem");
+  initlock(&pa_refcnt.lock, "refcnt");
+  memset(pa_refcnt.refcnt, 0, sizeof(pa_refcnt.refcnt));
   freerange(end, (void*)PHYSTOP);
 }
 
@@ -51,6 +109,11 @@ kfree(void *pa)
   if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
     panic("kfree");
 
+  if(get_refcnt(pa) > 1){
+    decr_refcnt(pa);
+    return;
+  }
+
   // Fill with junk to catch dangling refs.
   memset(pa, 1, PGSIZE);
 
@@ -72,8 +135,10 @@ kalloc(void)
 
   acquire(&kmem.lock);
   r = kmem.freelist;
-  if(r)
+  if(r){
     kmem.freelist = r->next;
+    init_refcnt((void*)r);
+  }
   release(&kmem.lock);
 
   if(r)
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..b585b52 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -343,6 +343,7 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
+#define PTE_C (1L << 8) // cow
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..cf587b9 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -67,6 +67,11 @@ usertrap(void)
     syscall();
   } else if((which_dev = devintr()) != 0){
     // ok
+  } else if(r_scause() == 15){
+    uint64 addr = r_stval();
+    if(cow_alloc(p->pagetable, addr) < 0){
+      setkilled(p);
+    }
   } else {
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
diff --git a/kernel/vm.c b/kernel/vm.c
index 5c31e87..40aba7d 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -315,22 +315,25 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   pte_t *pte;
   uint64 pa, i;
   uint flags;
-  char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
       panic("uvmcopy: pte should exist");
     if((*pte & PTE_V) == 0)
       panic("uvmcopy: page not present");
+      
     pa = PTE2PA(*pte);
+    
+    if(*pte & PTE_W){
+      *pte |= PTE_C;
+      *pte &= ~PTE_W;
+    }
     flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
-      goto err;
-    memmove(mem, (char*)pa, PGSIZE);
-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
-      kfree(mem);
+
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
       goto err;
     }
+    incr_refcnt((void *)pa);
   }
   return 0;
 
@@ -363,8 +366,9 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 
   while(len > 0){
     va0 = PGROUNDDOWN(dstva);
-    if(va0 >= MAXVA)
+    if(cow_alloc(pagetable, va0) < 0)
       return -1;
+  
     pte = walk(pagetable, va0, 0);
     if(pte == 0 || (*pte & PTE_V) == 0 || (*pte & PTE_U) == 0 ||
        (*pte & PTE_W) == 0)
@@ -449,3 +453,58 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
     return -1;
   }
 }
+
+int
+cow_alloc(pagetable_t pagetable, uint64 va)
+{
+  if(va >= MAXVA)
+    return -1;
+
+  uint64 current_pa, new_pa, page_aligned_va;
+  int flags;
+
+  pte_t *pte = walk(pagetable, va, 0);
+
+  if( pte == 0 || (*pte & PTE_V) == 0 || (*pte & PTE_U) == 0)
+    return -1;
+
+  flags = PTE_FLAGS(*pte);
+  current_pa = PTE2PA(*pte);
+
+  page_aligned_va = PGROUNDDOWN(va);
+
+  if( (*pte & PTE_W) || !(*pte & PTE_C)){
+    return 0;
+  }
+
+  if(!(*pte & PTE_C) && !(*pte & PTE_W)){
+    return -1;
+  }
+
+  int ref_cnt = get_refcnt((void *)current_pa);
+    
+  if(ref_cnt > 1){
+    new_pa = (uint64) kalloc();
+    if(new_pa == 0){
+      panic("Failed to allocate memory: cow_alloc");
+    }
+
+    memmove((void *)new_pa, (const void *) current_pa, PGSIZE);
+    uvmunmap(pagetable, page_aligned_va, 1, 1);
+
+    flags |= PTE_W;
+    flags &= ~PTE_C;
+    
+    if(mappages(pagetable, page_aligned_va, PGSIZE, new_pa, flags) != 0){
+      kfree((void *)new_pa);
+      return -1;
+    }
+    return 0;
+  } else if(ref_cnt == 1){
+    *pte |= PTE_W;
+    *pte &= ~PTE_C;
+    return 0;
+  }
+
+  return -1;
+}
\ No newline at end of file
